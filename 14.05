const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Conectando ao banco de dados
mongoose.connect('mongodb://localhost:27017/localizacoes', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Conectado ao banco de dados'))
  .catch(err => console.error('Erro ao conectar ao banco de dados:', err));

// Definindo o modelo de dados
const Localizacao = mongoose.model('Localizacao', {
  latitude: Number,
  longitude: Number,
  dataHora: { type: Date, default: Date.now }
});

// Middleware para tratar requisições JSON
app.use(bodyParser.json());

// Rota para receber dados de localização
app.post('/api/localizacoes', async (req, res) => {
  try {
    const { latitude, longitude } = req.body;
    const localizacao = new Localizacao({ latitude, longitude });
    await localizacao.save();
    res.status(201).json(localizacao);
  } catch (error) {
    console.error('Erro ao salvar localização:', error);
    res.status(500).json({ error: 'Erro ao salvar localização' });
  }
});

// Iniciando o servidor
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
import React, { useState } from 'react';
import { View, Text, StyleSheet, Button, TextInput, Alert } from 'react-native';
import axios from 'axios';

const App = () => {
  const [latitude, setLatitude] = useState(null);
  const [longitude, setLongitude] = useState(null);

  const getLocation = async () => {
    try {
      const position = await navigator.geolocation.getCurrentPosition();
      setLatitude(position.coords.latitude);
      setLongitude(position.coords.longitude);
    } catch (error) {
      console.error('Erro ao obter localização:', error);
      Alert.alert('Erro ao obter localização');
    }
  };

  const sendLocation = async () => {
    try {
      await axios.post('http://localhost:3000/api/localizacoes', {
        latitude,
        longitude
      });
      Alert.alert('Localização enviada com sucesso!');
    } catch (error) {
      console.error('Erro ao enviar localização:', error);
      Alert.alert('Erro ao enviar localização');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Obtendo sua Localização</Text>

      <Text style={styles.info}>Latitude: {latitude}</Text>
      <Text style={styles.info}>Longitude: {longitude}</Text>

      <Button title="Obter Localização" onPress={getLocation} />

      <View style={styles.buttonContainer}>
        <Button title="Enviar Localização" onPress={sendLocation} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  info: {
    marginBottom: 10,
  },
  buttonContainer: {
    marginTop: 20,
    width: '100%',
  },
});

export default App;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#f0f0f0',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  info: {
    marginBottom: 10,
    color: '#555',
  },
  buttonContainer: {
    marginTop: 20,
    width: '100%',
  },
  button: {
    backgroundColor: '#007bff',
    color: '#fff',
    paddingVertical: 10,
    borderRadius: 5,
    textAlign: 'center',
  },
  input: {
    marginBottom: 10,
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    width: '100%',
  },
});
